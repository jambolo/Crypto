/** @file *//********************************************************************************************************

                                                      Sha256.cpp

						                    Copyright 2004, John J. Bolton
	--------------------------------------------------------------------------------------------------------------

	$Header: //depot/Libraries/Crypto/Sha256.cpp#2 $

	$NoKeywords: $

 ********************************************************************************************************************/

#include "Sha256.h"

#include "Sha256Calculator.h"
#include "Common.h"

#include <cstring>
#include <xutility>

namespace Crypto
{


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

Sha256::Sha256()
{
	memset( &m_value, 0, sizeof m_value );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

Sha256::~Sha256()
{
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

Sha256::Sha256( unsigned __int8 const * pData, size_t size )
{
	Sha256Calculator().Calculate( pData, size, m_value );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

Sha256::Sha256( std::istream & stream )
{
	Sha256Calculator().Calculate( stream, m_value );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

Sha256::Sha256( std::string const & text )
{
	HexToBinary( text, m_value, SIZE );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

Sha256::Sha256( char const * text )
{
	HexToBinary( text, m_value, SIZE );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

std::string Sha256::ToString() const
{
	return BinaryToHex( m_value, SIZE );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

bool Sha256::operator == ( Sha256 const & y ) const
{
	return ( memcmp( m_value, y.m_value, sizeof( m_value ) ) == 0 );
}


} // namespace Crypto